{"ast":null,"code":"var _jsxFileName = \"/Users/leena/Downloads/MyProjectDemo/covidIndia/src/pages/testVsCases.js\";\nimport React, { Component, PropTypes } from 'react';\nimport axios from 'axios';\nimport { Grid } from '@material-ui/core';\nimport Plot from 'react-plotly.js';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Plotly from 'plotly.js';\n\nclass TestvsCases extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tests: null,\n      cases: null,\n      mapData: null\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://127.0.0.1:5000/getStatewiseStats').then(res => {\n      console.log(res.data);\n      this.setState({\n        tests: res.data.stats_data\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n    axios.get('http://127.0.0.1:5000/getStateMap').then(res => {\n      console.log(res.data);\n      this.setState({\n        mapData: JSON.parse(res.data)\n      });\n      var max_ = Math.max(...this.state.mapData.totalConfirmed);\n      var low = 10;\n      var high = 45;\n      var min_ = Math.min(...this.state.mapData.totalConfirmed);\n      var data = [{\n        type: \"scattermapbox\",\n        text: this.state.mapData.text,\n        lon: this.state.mapData.longitude,\n        lat: this.state.mapData.latitude,\n        marker: {\n          color: \"#3f51b5\",\n          size: this.state.mapData.totalConfirmed.map(x => (x - min_) * (high - low) / (max_ - min_) + low),\n          min: 5\n        }\n      }];\n      console.log(data);\n      var layout = {\n        dragmode: \"zoom\",\n        mapbox: {\n          style: \"open-street-map\",\n          center: {\n            lat: 21.30039105,\n            lon: 76.13001949\n          },\n          zoom: 3\n        },\n        margin: {\n          r: 0,\n          t: 0,\n          b: 0,\n          l: 0\n        }\n      };\n      Plotly.newPlot(graphDiv, data, layout);\n    }).catch(err => {\n      console.log(err);\n    });\n    var graphDiv = document.getElementById('statesDiv');\n  }\n\n  render() {\n    var layout_ = {\n      legend: {\n        font: {\n          size: 6,\n          color: \"#000\"\n        }\n      }\n    };\n    let displaytests = this.state.tests ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, this.state.tests.map(state => /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 6,\n      xs: 12,\n      md: 4,\n      lg: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alignCenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, \" Summary of \", state.State_Name, \" \")), /*#__PURE__*/React.createElement(Plot, {\n      data: state.chart,\n      useResizeHandler: true,\n      responsive: true,\n      layout: state.layout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }))))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"padding10per\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      color: \"textSecondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"Loading...\"), /*#__PURE__*/React.createElement(LinearProgress, {\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 12,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"statesDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 12,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, displaytests)));\n  }\n\n}\n\nTestvsCases.propTypes = {};\nexport default TestvsCases;","map":{"version":3,"sources":["/Users/leena/Downloads/MyProjectDemo/covidIndia/src/pages/testVsCases.js"],"names":["React","Component","PropTypes","axios","Grid","Plot","LinearProgress","Typography","Plotly","TestvsCases","constructor","props","state","tests","cases","mapData","componentDidMount","get","then","res","console","log","data","setState","stats_data","catch","err","JSON","parse","max_","Math","max","totalConfirmed","low","high","min_","min","type","text","lon","longitude","lat","latitude","marker","color","size","map","x","layout","dragmode","mapbox","style","center","zoom","margin","r","t","b","l","newPlot","graphDiv","document","getElementById","render","layout_","legend","font","displaytests","State_Name","chart","propTypes"],"mappings":"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","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport axios from 'axios';\nimport { Grid } from '@material-ui/core';\nimport Plot from 'react-plotly.js';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Plotly from 'plotly.js';\nclass TestvsCases extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n    state={\n        tests:null,\n        cases:null,\n        mapData:null\n    };\n    componentDidMount(){\n        axios.get('http://127.0.0.1:5000/getStatewiseStats').then(res=>{\n            console.log(res.data);\n            this.setState({\n                tests:res.data.stats_data\n            })\n            \n        }).catch(err=>{\n            console.log(err)\n        });\n        axios.get('http://127.0.0.1:5000/getStateMap').then(res=>{\n            console.log(res.data);\n            this.setState({\n                mapData:JSON.parse(res.data)\n            });\n\n            var max_=Math.max(...this.state.mapData.totalConfirmed);\n                    var low=10;\n                    var high=45;\n                    var min_=Math.min(...this.state.mapData.totalConfirmed);\n                    \n                    var data = [\n                        {\n                            type: \"scattermapbox\",\n                            text: this.state.mapData.text,\n                            lon: this.state.mapData.longitude,\n                            lat: this.state.mapData.latitude,\n                            marker: { color: \"#3f51b5\", size: this.state.mapData.totalConfirmed.map(x=> (((x-min_)*(high-low))/(max_-min_))+low) ,min:5}\n                        }\n                    ];\n                    console.log(data)\n                    var layout = {\n                        dragmode: \"zoom\",\n                        mapbox: { style: \"open-street-map\", center: { lat: 21.30039105, lon: 76.13001949  }, zoom: 3 },\n                        margin: { r: 0, t: 0, b: 0, l: 0 }\n                    };\n            \n                    Plotly.newPlot(graphDiv, data, layout);\n            \n        }).catch(err=>{\n            console.log(err)\n        });\n        var graphDiv = document.getElementById('statesDiv');\n          \n    }\n\n\n    render() {\n        var layout_={legend : {font : {size : 6, color : \"#000\"}}};\n        \n        let displaytests=this.state.tests? (\n        <div>\n            \n        {this.state.tests.map(state=>\n        <Grid item sm={6} xs={12} md={4} lg={3}>\n                <div className=\"alignCenter\">\n                <h4><center> Summary of {state.State_Name} </center></h4>\n            <Plot data={state.chart}\n            useResizeHandler={true}\n            responsive={true}\n            layout={state.layout}\n            \n            ></Plot>\n        </div>\n        </Grid>\n            \n        )        \n        \n    }\n        {/* <h4><center>Statewise summary of Confirmed Cases per day</center></h4>\n                \n        <div className=\"alignCenter\">\n            <Plot data={this.state.tests}\n            useResizeHandler={true}\n            responsive={true}\n            layout={layout_}\n            \n            ></Plot>\n        </div> */}\n        </div>\n        ):\n        <div className=\"padding10per\">\n        <Typography color=\"textSecondary\">Loading...</Typography>\n        <LinearProgress color=\"secondary\" />\n        </div>;\n        return(\n        <Grid container>\n                <Grid item sm={12} xs={12}>\n                    \n                    <div id=\"statesDiv\"></div>\n                </Grid>\n                \n                <Grid item sm={12} xs={12}>\n                    <Grid container>\n                    {displaytests}\n                    </Grid>\n                    </Grid>\n                \n            </Grid>\n        );\n    }\n}\n\nTestvsCases.propTypes = {\n\n};\n\nexport default TestvsCases;"]},"metadata":{},"sourceType":"module"}