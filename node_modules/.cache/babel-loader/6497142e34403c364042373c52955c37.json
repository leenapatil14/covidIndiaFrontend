{"ast":null,"code":"'use strict';\n\nvar warp = require('ndarray-warp');\n\nvar invert = require('gl-matrix-invert');\n\nmodule.exports = applyHomography;\n\nfunction applyHomography(dest, src, Xi) {\n  var n = src.dimension;\n  var X = invert([], Xi);\n  warp(dest, src, function (out_c, inp_c) {\n    for (var i = 0; i < n; ++i) {\n      out_c[i] = X[(n + 1) * n + i];\n\n      for (var j = 0; j < n; ++j) {\n        out_c[i] += X[(n + 1) * j + i] * inp_c[j];\n      }\n    }\n\n    var w = X[(n + 1) * (n + 1) - 1];\n\n    for (var j = 0; j < n; ++j) {\n      w += X[(n + 1) * j + n] * inp_c[j];\n    }\n\n    var wr = 1.0 / w;\n\n    for (var i = 0; i < n; ++i) {\n      out_c[i] *= wr;\n    }\n\n    return out_c;\n  });\n  return dest;\n}","map":{"version":3,"sources":["/Users/leena/Downloads/MyProjectDemo/Udacity_Data_Science_Nanodegree_Repo/COVID_India/react_project/react_project/node_modules/ndarray-homography/xform.js"],"names":["warp","require","invert","module","exports","applyHomography","dest","src","Xi","n","dimension","X","out_c","inp_c","i","j","w","wr"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,eAAjB;;AAEA,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,GAA/B,EAAoCC,EAApC,EAAwC;AACtC,MAAIC,CAAC,GAAGF,GAAG,CAACG,SAAZ;AACA,MAAIC,CAAC,GAAGT,MAAM,CAAC,EAAD,EAAKM,EAAL,CAAd;AACAR,EAAAA,IAAI,CAACM,IAAD,EAAOC,GAAP,EAAY,UAASK,KAAT,EAAgBC,KAAhB,EAAuB;AACrC,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,CAAf,EAAkB,EAAEK,CAApB,EAAuB;AACrBF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAWH,CAAC,CAAC,CAACF,CAAC,GAAC,CAAH,IAAMA,CAAN,GAAUK,CAAX,CAAZ;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACN,CAAf,EAAkB,EAAEM,CAApB,EAAuB;AACrBH,QAAAA,KAAK,CAACE,CAAD,CAAL,IAAYH,CAAC,CAAC,CAACF,CAAC,GAAC,CAAH,IAAMM,CAAN,GAAQD,CAAT,CAAD,GAAeD,KAAK,CAACE,CAAD,CAAhC;AACD;AACF;;AACD,QAAIC,CAAC,GAAGL,CAAC,CAAC,CAACF,CAAC,GAAC,CAAH,KAAOA,CAAC,GAAC,CAAT,IAAY,CAAb,CAAT;;AACA,SAAI,IAAIM,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACN,CAAf,EAAkB,EAAEM,CAApB,EAAuB;AACrBC,MAAAA,CAAC,IAAIL,CAAC,CAAC,CAACF,CAAC,GAAC,CAAH,IAAMM,CAAN,GAAQN,CAAT,CAAD,GAAeI,KAAK,CAACE,CAAD,CAAzB;AACD;;AACD,QAAIE,EAAE,GAAG,MAAMD,CAAf;;AACA,SAAI,IAAIF,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,CAAf,EAAkB,EAAEK,CAApB,EAAuB;AACrBF,MAAAA,KAAK,CAACE,CAAD,CAAL,IAAYG,EAAZ;AACD;;AACD,WAAOL,KAAP;AACD,GAhBG,CAAJ;AAiBA,SAAON,IAAP;AACD","sourcesContent":["'use strict'\n\nvar warp = require('ndarray-warp')\nvar invert = require('gl-matrix-invert')\n\nmodule.exports = applyHomography\n\nfunction applyHomography(dest, src, Xi) {\n  var n = src.dimension\n  var X = invert([], Xi)\n  warp(dest, src, function(out_c, inp_c) {\n    for(var i=0; i<n; ++i) {\n      out_c[i] = X[(n+1)*n + i]\n      for(var j=0; j<n; ++j) {\n        out_c[i] += X[(n+1)*j+i] * inp_c[j]\n      }\n    }\n    var w = X[(n+1)*(n+1)-1]\n    for(var j=0; j<n; ++j) {\n      w += X[(n+1)*j+n] * inp_c[j]\n    }\n    var wr = 1.0 / w\n    for(var i=0; i<n; ++i) {\n      out_c[i] *= wr\n    }\n    return out_c\n  })\n  return dest\n}"]},"metadata":{},"sourceType":"script"}