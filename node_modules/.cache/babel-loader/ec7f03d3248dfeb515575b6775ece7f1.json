{"ast":null,"code":"'use strict';\n\nvar interp = require('ndarray-linear-interpolate');\n\nvar cwise = require('cwise');\n\nvar do_warp = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function (idx, dest, func, interp, n) {\n    this.warped = new Array(n);\n  },\n  body: function warpND(idx, dest, func, interp, n) {\n    func(this.warped, idx);\n    dest = interp.apply(undefined, this.warped);\n  }\n});\nvar do_warp_1 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function () {\n    this.warped = [0];\n  },\n  body: function warp1D(idx, dest, func, interp, src) {\n    func(this.warped, idx);\n    dest = interp(src, this.warped[0]);\n  }\n});\nvar do_warp_2 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function () {\n    this.warped = [0, 0];\n  },\n  body: function warp2D(idx, dest, func, interp, src) {\n    func(this.warped, idx);\n    dest = interp(src, this.warped[0], this.warped[1]);\n  }\n});\nvar do_warp_3 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function () {\n    this.warped = [0, 0, 0];\n  },\n  body: function warp3D(idx, dest, func, interp, src) {\n    func(this.warped, idx);\n    dest = interp(src, this.warped[0], this.warped[1], this.warped[2]);\n  }\n});\n\nmodule.exports = function warp(dest, src, func) {\n  switch (src.shape.length) {\n    case 1:\n      do_warp_1(dest, func, interp.d1, src);\n      break;\n\n    case 2:\n      do_warp_2(dest, func, interp.d2, src);\n      break;\n\n    case 3:\n      do_warp_3(dest, func, interp.d3, src);\n      break;\n\n    default:\n      do_warp(dest, func, interp.bind(undefined, src), src.shape.length);\n      break;\n  }\n\n  return dest;\n};","map":{"version":3,"sources":["/Users/leena/Downloads/MyProjectDemo/covidIndia/node_modules/ndarray-warp/warp.js"],"names":["interp","require","cwise","do_warp","args","pre","idx","dest","func","n","warped","Array","body","warpND","apply","undefined","do_warp_1","warp1D","src","do_warp_2","warp2D","do_warp_3","warp3D","module","exports","warp","shape","length","d1","d2","d3","bind"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAIC,OAAO,CAAC,4BAAD,CAArB;;AACA,IAAIC,KAAK,GAAKD,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAIE,OAAO,GAAGD,KAAK,CAAC;AAClBE,EAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,QAA7B,EAAuC,QAAvC,CADY;AAElBC,EAAAA,GAAG,EAAE,UAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BR,MAA1B,EAAkCS,CAAlC,EAAqC;AACxC,SAAKC,MAAL,GAAc,IAAIC,KAAJ,CAAUF,CAAV,CAAd;AACD,GAJiB;AAKlBG,EAAAA,IAAI,EAAE,SAASC,MAAT,CAAgBP,GAAhB,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCR,MAAjC,EAAyCS,CAAzC,EAA4C;AAChDD,IAAAA,IAAI,CAAC,KAAKE,MAAN,EAAcJ,GAAd,CAAJ;AACAC,IAAAA,IAAI,GAAGP,MAAM,CAACc,KAAP,CAAaC,SAAb,EAAwB,KAAKL,MAA7B,CAAP;AACD;AARiB,CAAD,CAAnB;AAWA,IAAIM,SAAS,GAAGd,KAAK,CAAC;AACpBE,EAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,QAA7B,EAAuC,QAAvC,CADc;AAEpBC,EAAAA,GAAG,EAAE,YAAW;AACd,SAAKK,MAAL,GAAc,CAAC,CAAD,CAAd;AACD,GAJmB;AAKpBE,EAAAA,IAAI,EAAE,SAASK,MAAT,CAAgBX,GAAhB,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCR,MAAjC,EAAyCkB,GAAzC,EAA8C;AAClDV,IAAAA,IAAI,CAAC,KAAKE,MAAN,EAAcJ,GAAd,CAAJ;AACAC,IAAAA,IAAI,GAAGP,MAAM,CAACkB,GAAD,EAAM,KAAKR,MAAL,CAAY,CAAZ,CAAN,CAAb;AACD;AARmB,CAAD,CAArB;AAWA,IAAIS,SAAS,GAAGjB,KAAK,CAAC;AACpBE,EAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,QAA7B,EAAuC,QAAvC,CADc;AAEpBC,EAAAA,GAAG,EAAE,YAAW;AACd,SAAKK,MAAL,GAAc,CAAC,CAAD,EAAI,CAAJ,CAAd;AACD,GAJmB;AAKpBE,EAAAA,IAAI,EAAE,SAASQ,MAAT,CAAgBd,GAAhB,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCR,MAAjC,EAAyCkB,GAAzC,EAA8C;AAClDV,IAAAA,IAAI,CAAC,KAAKE,MAAN,EAAcJ,GAAd,CAAJ;AACAC,IAAAA,IAAI,GAAGP,MAAM,CAACkB,GAAD,EAAM,KAAKR,MAAL,CAAY,CAAZ,CAAN,EAAsB,KAAKA,MAAL,CAAY,CAAZ,CAAtB,CAAb;AACD;AARmB,CAAD,CAArB;AAWA,IAAIW,SAAS,GAAGnB,KAAK,CAAC;AACpBE,EAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,QAA7B,EAAuC,QAAvC,CADc;AAEpBC,EAAAA,GAAG,EAAE,YAAW;AACd,SAAKK,MAAL,GAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd;AACD,GAJmB;AAKpBE,EAAAA,IAAI,EAAE,SAASU,MAAT,CAAgBhB,GAAhB,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCR,MAAjC,EAAyCkB,GAAzC,EAA8C;AAClDV,IAAAA,IAAI,CAAC,KAAKE,MAAN,EAAcJ,GAAd,CAAJ;AACAC,IAAAA,IAAI,GAAGP,MAAM,CAACkB,GAAD,EAAM,KAAKR,MAAL,CAAY,CAAZ,CAAN,EAAsB,KAAKA,MAAL,CAAY,CAAZ,CAAtB,EAAsC,KAAKA,MAAL,CAAY,CAAZ,CAAtC,CAAb;AACD;AARmB,CAAD,CAArB;;AAWAa,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAclB,IAAd,EAAoBW,GAApB,EAAyBV,IAAzB,EAA+B;AAC9C,UAAOU,GAAG,CAACQ,KAAJ,CAAUC,MAAjB;AACE,SAAK,CAAL;AACEX,MAAAA,SAAS,CAACT,IAAD,EAAOC,IAAP,EAAaR,MAAM,CAAC4B,EAApB,EAAwBV,GAAxB,CAAT;AACA;;AACF,SAAK,CAAL;AACEC,MAAAA,SAAS,CAACZ,IAAD,EAAOC,IAAP,EAAaR,MAAM,CAAC6B,EAApB,EAAwBX,GAAxB,CAAT;AACA;;AACF,SAAK,CAAL;AACEG,MAAAA,SAAS,CAACd,IAAD,EAAOC,IAAP,EAAaR,MAAM,CAAC8B,EAApB,EAAwBZ,GAAxB,CAAT;AACA;;AACF;AACEf,MAAAA,OAAO,CAACI,IAAD,EAAOC,IAAP,EAAaR,MAAM,CAAC+B,IAAP,CAAYhB,SAAZ,EAAuBG,GAAvB,CAAb,EAA0CA,GAAG,CAACQ,KAAJ,CAAUC,MAApD,CAAP;AACA;AAZJ;;AAcA,SAAOpB,IAAP;AACD,CAhBD","sourcesContent":["'use strict'\n\nvar interp  = require('ndarray-linear-interpolate')\nvar cwise   = require('cwise')\n\nvar do_warp = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function(idx, dest, func, interp, n) {\n    this.warped = new Array(n)\n  },\n  body: function warpND(idx, dest, func, interp, n) {\n    func(this.warped, idx)\n    dest = interp.apply(undefined, this.warped)\n  }\n})\n\nvar do_warp_1 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function() {\n    this.warped = [0]\n  },\n  body: function warp1D(idx, dest, func, interp, src) {\n    func(this.warped, idx)\n    dest = interp(src, this.warped[0])\n  }\n})\n\nvar do_warp_2 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function() {\n    this.warped = [0, 0]\n  },\n  body: function warp2D(idx, dest, func, interp, src) {\n    func(this.warped, idx)\n    dest = interp(src, this.warped[0], this.warped[1])\n  }\n})\n\nvar do_warp_3 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function() {\n    this.warped = [0, 0, 0]\n  },\n  body: function warp3D(idx, dest, func, interp, src) {\n    func(this.warped, idx)\n    dest = interp(src, this.warped[0], this.warped[1], this.warped[2])\n  }\n})\n\nmodule.exports = function warp(dest, src, func) {\n  switch(src.shape.length) {\n    case 1:\n      do_warp_1(dest, func, interp.d1, src)\n      break\n    case 2:\n      do_warp_2(dest, func, interp.d2, src)\n      break\n    case 3:\n      do_warp_3(dest, func, interp.d3, src)\n      break\n    default:\n      do_warp(dest, func, interp.bind(undefined, src), src.shape.length)\n      break\n  }\n  return dest\n}\n"]},"metadata":{},"sourceType":"script"}